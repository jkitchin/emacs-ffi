#+title: Adding linear algebra to Emacs with the GSL and dynamic modules

* The code setup

The gsl code is in [[./gsl-linalg.c]].

You build the code from the makefile.

You need to have the gsl library installed. For Mac, get it like this

#+BEGIN_SRC sh
brew install gsl
#+END_SRC

Then, build the extension and run the test.

#+BEGIN_SRC sh :results org
make clean
make
make test
#+END_SRC

#+RESULTS:
#+begin_src org
rm *.o *.so
gcc -Wall -I/opt/homebrew/include -fPIC -c gsl-linalg.c
gcc -shared -L/opt/homebrew/lib -lgsl -o gsl-linalg.so gsl-linalg.o
emacs -batch -q -l tests.el -f test-linalg

"You should get [7.0 8.0]"

"You actually got [7.0 8.0]"
emacs -batch -q -l tests.el -f test-dgemm

[[1.0000000000000004] [1.9999999999999991] [2.999999999999999] [4.0]]

"You should get this:
[[1.0000000000000004] [1.9999999999999991] [2.999999999999999] [4.0]]"

"No error counts as a passed test here."
#+end_src

* Adding linear algebra to Emacs with the GSL and dynamic modules

The goal of this example is to be able to solve equations like this one with native Emacs lisp.

\[\left(\begin{array}{cccc}
 0.18& 0.60& 0.57& 0.96 \\
 0.41& 0.24& 0.99& 0.58 \\
 0.14& 0.30& 0.97& 0.66 \\
 0.51& 0.13& 0.19& 0.85 \end{array} \right ) 
\left ( \begin{array}{c} x_0 \\ x_1 \\ x_2 \\ x_3 \end{array} \right )
= \left ( \begin{array}{c} 1.0 \\ 2.0 \\ 3.0 \\ 4.0 \end{array} \right ) \]

The answer is [[https://www.gnu.org/software/gsl/doc/html/linalg.html#examples:][given]] as

\[x = \left ( \begin{array}{c} -4.05205 \\ -12.6056 \\ 1.66091 \\ 8.69377 \end{array} \right ) \]

The syntax we want to use is shown below, and we want it to return a vector containing the solution:

#+BEGIN_SRC emacs-lisp
(let ((A [[0.18 0.60 0.57 0.96]
	  [0.41 0.24 0.99 0.58]
	  [0.14 0.30 0.97 0.66]
	  [0.51 0.13 0.19 0.85]])
      (b [1.0 2.0 3.0 4.0]))
  (gsl-linalg-LU-solve A b))
#+END_SRC


I don't install this on the load-path, so we add it manually here.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (expand-file-name "."))

(require 'gsl-linalg)
#+END_SRC

#+RESULTS:
: gsl-linalg

Here is one function in the module:

#+BEGIN_SRC emacs-lisp
(describe-function 'gsl-linalg-LU-solve)
#+END_SRC

#+RESULTS:
: gsl-linalg-LU-solve is a module-function.
: 
: (gsl-linalg-LU-solve ARG1 ARG2)
: 
: (gsl-linalg-LU-solve A b).
: Solve A x = b for x.
: Returns a vector containing the solution x.
: 

Now, we can solve linear equations like this:

#+BEGIN_SRC emacs-lisp
(gsl-linalg-LU-solve
 [[0.18 0.60 0.57 0.96]
  [0.41 0.24 0.99 0.58]
  [0.14 0.30 0.97 0.66]
  [0.51 0.13 0.19 0.85]]
 [1.0 2.0 3.0 4.0])
#+END_SRC

#+RESULTS:
: [-4.052050229573971 -12.605611395906905 1.6609116267088422 8.693766928795227]

That matches the expected answer.

We have a limited ability to confirm this answer. I have written a function that uses blas for multiplication of 2d vectors. You can see from this:

#+BEGIN_SRC emacs-lisp
(gsl-blas-dgemm [[0.18 0.60 0.57 0.96]
		 [0.41 0.24 0.99 0.58]
		 [0.14 0.30 0.97 0.66]
		 [0.51 0.13 0.19 0.85]]
		[[-4.052050229573973]
		 [-12.605611395906903]
		 [1.6609116267088417]
		 [8.693766928795227]])
#+END_SRC

#+RESULTS:
: [[1.0000000000000004] [1.9999999999999991] [2.999999999999999] [4.0]]

That shows that within float tolerance that indeed $A x = b$.

The main limitation of this module at the moment is that you have to use vectors; you cannot put in a list of numbers. It is possible to make it take lists and vectors, but for now I am leaving it at vectors. Also, it only produces solutions of float numbers (not integers).

The module does not handle 1d vectors well,, e.g. in gsl-linalg-LU-solve example, the right hand side is implied to be a column vector, and we don't have the array broadcasting features of Python yet. Those are doable things for some future day perhaps. 


